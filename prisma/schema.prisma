// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id            String    @id @default(cuid())
  name          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  metrics       Metric[]
  scenarios     Scenario[]
  webhookLogs   WebhookLog[]
  ghlIntegrations GHLIntegration[]
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String       @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           String       @default("user")
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Metric {
  id             String       @id @default(cuid())
  organizationId String
  type           String
  scenarioName   String
  contactEmail   String
  createdAt      DateTime    @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Signature {
  id        String     @id @default(cuid())
  name      String
  content   String     @db.Text
  scenarios Scenario[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Scenario {
  id             String       @id @default(cuid())
  name           String
  type           String
  organizationId String
  signatureId    String?
  signature      Signature?   @relation(fields: [signatureId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  attachments    Attachment[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Prompt {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldMapping {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  mapping     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attachment {
  id         String   @id @default(cuid())
  name       String
  url        String
  scenarioId String
  scenario   Scenario @relation(fields: [scenarioId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WebhookField {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  required    Boolean  @default(false)
  type        String   @default("string")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookLog {
  id             String       @id @default(cuid())
  organizationId String
  scenarioName   String
  contactEmail   String
  status         String
  payload        Json
  createdAt      DateTime    @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model PlayingWithNeon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model GHLIntegration {
  id             String       @id @default(cuid())
  locationId     String
  locationName   String?
  accessToken    String
  refreshToken   String
  expiresAt      DateTime
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([organizationId, locationId])
  @@index([locationId])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                   String                    @id @default(cuid())
  name                 String                    @unique
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  webhookUrl           String                    @unique @default(uuid())
  outboundWebhookUrl   String?
  stripeCustomerId     String?
  billingPlan          String?                   @default("unlimited")
  creditBalance        Int?                      @default(0)
  lastBillingSync      DateTime?
  nextBillingDate      DateTime?
  stripeTestCustomerId String?
  location_id          String?                   @unique
  attachments          Attachment[]
  billingEvents        BillingEvent[]
  connectedAccounts    ConnectedAccountBilling[]
  creditUsage          CreditUsage[]
  CrmInfo              CrmInfo?
  emailAccounts        EmailAccount[]
  emailMessages        EmailMessage[]
  metrics              Metric[]
  prompts              Prompt[]
  researchResults      ResearchResult[]
  scenarios            Scenario[]
  snippets             Snippet[]
  socialAccounts       SocialAccount[]
  subscriptions        Subscription[]
  users                User[]
  webhookLogs          WebhookLog[]
  appointments         Appointment[]
  chatConversations    ChatConversation[]
  statusChanges        StatusChangeLog[]

  @@index([stripeTestCustomerId], map: "organization_stripe_test_customer_idx")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  role              String             @default("user")
  organizationId    String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  sessions          Session[]
  organization      Organization?      @relation(fields: [organizationId], references: [id])
  chatConversations ChatConversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Metric {
  id             String       @id @default(cuid())
  accountId      String
  organizationId String
  scenarioName   String
  enrollments    Int          @default(0)
  replies        Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([accountId, scenarioName])
  @@index([scenarioName])
}

model Signature {
  id        String     @id @default(cuid())
  name      String     @unique
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  scenarios Scenario[]
}

model Scenario {
  id                  String             @id @default(cuid())
  name                String
  description         String?
  status              String             @default("active")
  signatureId         String?
  customizationPrompt String?
  emailExamplesPrompt String?
  organizationId      String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  attachmentId        String?
  isFollowUp          Boolean            @default(false)
  snippetId           String?
  subjectLine         String?
  touchpointType      String             @default("email")
  filters             Json?              @default("[]")
  testEmail           String?
  testMode            Boolean            @default(false)
  isHighPerforming    Boolean            @default(false)
  attachment          Attachment?        @relation(fields: [attachmentId], references: [id])
  organization        Organization       @relation(fields: [organizationId], references: [id])
  signature           Signature?         @relation(fields: [signatureId], references: [id])
  snippet             Snippet?           @relation(fields: [snippetId], references: [id])
  messages            ScenarioMessage[]
  responses           ScenarioResponse[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Prompt {
  id             String        @id @default(cuid())
  name           String
  content        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  @@unique([name, organizationId])
  @@index([organizationId])
}

model FieldMapping {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  mapping     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attachment {
  id             String       @id @default(cuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  content        String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  scenarios      Scenario[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

model WebhookField {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  required     Boolean  @default(false)
  type         String   @default("string")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  originalName String
}

model WebhookLog {
  id               String        @id @default(cuid())
  accountId        String
  organizationId   String
  createdAt        DateTime      @default(now())
  status           String        @default("received")
  scenarioName     String        @default("Unknown")
  contactEmail     String        @default("Unknown")
  contactName      String        @default("Unknown")
  company          String        @default("Unknown")
  requestBody      Json
  responseBody     Json          @default("{}")
  ghlIntegrationId String?
  updatedAt        DateTime      @default(now())
  emailSubject     String?
  emailHtmlBody    String?
  creditUsages     CreditUsage[]
  organization     Organization  @relation(fields: [organizationId], references: [id])

  @@index([accountId])
  @@index([createdAt])
  @@index([scenarioName])
  @@index([ghlIntegrationId])
  @@index([organizationId, status], map: "webhook_log_org_status_idx")
  @@index([status, createdAt], map: "webhook_log_status_created_at_idx")
}

model PlayingWithNeon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model ResearchResult {
  id             String       @id
  query          String
  result         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model Snippet {
  id             String        @id @default(cuid())
  name           String
  content        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  scenarios      Scenario[]
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  @@unique([name, organizationId])
  @@index([organizationId])
}

model EmailAccount {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String
  organizationId   String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isActive         Boolean         @default(true)
  unipileAccountId String?
  organization     Organization    @relation(fields: [organizationId], references: [id])
  emailMessages    EmailMessage[]
  socialAccounts   SocialAccount[]

  @@unique([email, organizationId])
  @@index([organizationId])
}

model EmailMessage {
  id                   String             @id @default(cuid())
  messageId            String             @unique
  threadId             String
  organizationId       String
  emailAccountId       String?
  subject              String
  sender               String
  recipientEmail       String
  content              String          @db.Text
  receivedAt           DateTime
  messageType          MessageType     @default(REAL_REPLY)
  isRead               Boolean         @default(false)
  classificationScores Json?
  unipileEmailId       String?
  status               MessageStatus   @default(NO_ACTION_NEEDED)
  messageSource        MessageSource   @default(EMAIL)
  socialAccountId      String?
  statusChangedAt      DateTime        @default(now())
  aiSuggestion1        String?
  aiSuggestion2        String?
  aiSuggestion3        String?
  socialAccount        SocialAccount?     @relation(fields: [socialAccountId], references: [id])
  emailAccount         EmailAccount?      @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  organization         Organization       @relation(fields: [organizationId], references: [id])
  statusChanges        StatusChangeLog[]

  @@index([organizationId])
  @@index([emailAccountId])
  @@index([threadId])
  @@index([socialAccountId])
}

model ScenarioMessage {
  id         String   @id @default(cuid())
  scenarioId String
  threadId   String
  sender     String?
  hasReplied Boolean  @default(false)
  createdAt  DateTime @default(now())
  messageId  String
  updatedAt  DateTime @default(now()) @updatedAt
  scenario   Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([scenarioId, threadId, sender])
  @@index([messageId])
  @@index([threadId])
  @@index([sender])
  @@index([scenarioId])
}

model SocialAccount {
  id               String         @id @default(cuid())
  username         String
  name             String
  provider         String
  providerId       String?
  organizationId   String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)
  unipileAccountId String?        @unique
  emailAccountId   String?
  emailAccount     EmailAccount?  @relation(fields: [emailAccountId], references: [id])
  organization     Organization   @relation(fields: [organizationId], references: [id])
  messages         EmailMessage[]

  @@index([organizationId])
  @@index([provider])
  @@index([emailAccountId])
}

model CreditUsage {
  id             String       @id @default(cuid())
  organizationId String
  amount         Int
  description    String?
  createdAt      DateTime     @default(now())
  webhookLogId   String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  webhookLog     WebhookLog?  @relation(fields: [webhookLogId], references: [id], onUpdate: NoAction)

  @@index([createdAt], map: "credit_usage_created_at_idx")
  @@index([organizationId], map: "credit_usage_org_id_idx")
}

model Subscription {
  id                   String       @id @default(cuid())
  organizationId       String
  stripeSubscriptionId String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  subscriptionItemId   String?
  priceId              String?
  quantity             Int?         @default(1)
  isTestMode           Boolean      @default(false)
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([organizationId], map: "subscription_org_id_idx")
  @@index([status], map: "subscription_status_idx")
  @@index([stripeSubscriptionId], map: "subscription_stripe_id_idx")
  @@index([isTestMode], map: "subscription_test_mode_idx")
}

model BillingEvent {
  id             String       @id
  organizationId String
  type           String
  status         String
  amount         Int?
  description    String?
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isTestMode     Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "billing_event_created_at_idx")
  @@index([organizationId], map: "billing_event_org_id_idx")
  @@index([type], map: "billing_event_type_idx")
  @@index([isTestMode], map: "billing_event_test_mode_idx")
}

model ConnectedAccountBilling {
  id                       String       @id @default(cuid())
  organizationId           String
  accountType              String
  accountId                String
  stripeSubscriptionItemId String?
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  organization             Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organizationId, accountType, accountId], map: "connected_account_billing_unique")
}

model ScenarioResponse {
  id         String   @id @default(cuid())
  scenarioId String
  source     String
  threadId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  scenario   Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@index([scenarioId])
  @@index([source])
}

model Appointment {
  id                  String       @id @default(uuid())
  organizationId      String
  createdAt           DateTime     @default(now())
  notes               String?
  clientName          String
  appointmentType     String
  appointmentDateTime DateTime
  status              String       @default("appointment_booked")
  organization        Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([createdAt])
}

model CrmInfo {
  id                              String       @id
  organizationId                  String       @unique(map: "CrmInfo_organization_id_key")
  private_integration_token       String?
  prospect_research               String?
  company_research                String?
  previous_message_copy           String?
  previous_message_subject_line   String?
  previous_message_id             String?
  thread_id                       String?
  email_sender                    String?
  original_outbound_rep_name      String?
  date_of_research                String?
  all_employees                   String?
  provider_id                     String?
  mutual_connections              String?
  additional_research             String?
  current_scenario                String?
  outbound_rep_name               String?
  lead_status                     String?
  createdAt                       DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt                       DateTime?    @default(now()) @db.Timestamp(6)
  initial_linkedin_message_copy   String?
  linkedin_user_provider_id       String?
  title_field_id                  String?
  linkedin_profile_photo_field_id String?
  Organization                    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CrmInfo_organization_id_fkey")

  @@index([organizationId], map: "crm_info_organization_id_idx")
}

enum MessageType {
  REAL_REPLY
  BOUNCE
  AUTO_REPLY
  OUT_OF_OFFICE
  OTHER
}

enum MessageSource {
  EMAIL
  LINKEDIN
}

enum MessageStatus {
  MEETING_BOOKED
  NOT_INTERESTED
  NO_ACTION_NEEDED
  FOLLOW_UP_NEEDED
  WAITING_FOR_REPLY
  ARCHIVED
  SPAM
}

model ChatConversation {
  id             String        @id @default(cuid())
  title          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String
  user           User          @relation(fields: [userId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  messages       ChatMessage[]
}

model ChatMessage {
  id             String           @id @default(cuid())
  content        String           @db.Text
  role           String // 'user' or 'assistant'
  createdAt      DateTime         @default(now())
  conversationId String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum ConversationStatus {
  MEETING_BOOKED
  NOT_INTERESTED
  FOLLOW_UP_NEEDED
  NO_ACTION_NEEDED
  WAITING_FOR_REPLY
}

model StatusChangeLog {
  id              String            @id @default(uuid())
  messageId       String
  threadId        String
  organizationId  String
  oldStatus       ConversationStatus
  newStatus       ConversationStatus
  changedAt       DateTime          @default(now())
  scheduledChange Boolean           @default(false)
  successful      Boolean
  errorMessage    String?

  message         EmailMessage @relation(fields: [messageId], references: [messageId])
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@index([messageId])
  @@index([organizationId])
  @@index([changedAt])
}

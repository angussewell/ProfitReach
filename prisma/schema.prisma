generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                 String           @id @default(cuid())
  name               String           @unique
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  webhookUrl         String           @unique @default(uuid())
  outboundWebhookUrl String?
  attachments        Attachment[]
  emailAccounts      EmailAccount[]
  ghlIntegrations    GHLIntegration[]
  metrics            Metric[]
  researchResults    ResearchResult[]
  scenarios          Scenario[]
  users              User[]
  webhookLogs        WebhookLog[]
  emailMessages      EmailMessage[]
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           String        @default("user")
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Metric {
  id             String       @id @default(cuid())
  accountId      String
  organizationId String
  scenarioName   String
  enrollments    Int          @default(0)
  replies        Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([accountId, scenarioName])
  @@index([scenarioName])
}

model Signature {
  id        String     @id @default(cuid())
  name      String     @unique
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  scenarios Scenario[]
}

model Scenario {
  id                  String       @id @default(cuid())
  name                String       @unique
  description         String?
  status              String       @default("active")
  signatureId         String?
  customizationPrompt String?
  emailExamplesPrompt String?
  organizationId      String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  attachmentId        String?
  isFollowUp          Boolean      @default(false)
  snippetId           String?
  subjectLine         String?
  touchpointType      String       @default("email")
  filters             Json?        @default("[]")
  testEmail           String?
  testMode            Boolean      @default(false)
  attachment          Attachment?  @relation(fields: [attachmentId], references: [id])
  organization        Organization @relation(fields: [organizationId], references: [id])
  signature           Signature?   @relation(fields: [signatureId], references: [id])
  snippet             Snippet?     @relation(fields: [snippetId], references: [id])

  @@index([organizationId])
}

model Prompt {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldMapping {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  mapping     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attachment {
  id             String       @id @default(cuid())
  name           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  content        String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  scenarios      Scenario[]

  @@index([organizationId])
}

model WebhookField {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  required     Boolean  @default(false)
  type         String   @default("string")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  originalName String
}

model WebhookLog {
  id               String          @id @default(cuid())
  accountId        String
  organizationId   String
  createdAt        DateTime        @default(now())
  status           String          @default("error")
  scenarioName     String          @default("Unknown")
  contactEmail     String          @default("Unknown")
  contactName      String          @default("Unknown")
  company          String          @default("Unknown")
  requestBody      Json
  responseBody     Json            @default("{}")
  ghlIntegrationId String?
  GHLIntegration   GHLIntegration? @relation(fields: [ghlIntegrationId], references: [id])
  organization     Organization    @relation(fields: [organizationId], references: [id])

  @@index([accountId])
  @@index([createdAt])
  @@index([ghlIntegrationId])
  @@index([scenarioName])
}

model PlayingWithNeon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model GHLIntegration {
  id             String       @id @default(cuid())
  locationId     String
  locationName   String?
  accessToken    String
  refreshToken   String
  expiresAt      DateTime
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  WebhookLog     WebhookLog[]

  @@unique([organizationId, locationId])
  @@index([locationId])
}

model ResearchResult {
  id             String       @id
  query          String
  result         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model Snippet {
  id        String     @id @default(cuid())
  name      String     @unique
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  scenarios Scenario[]
}

model EmailAccount {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  password       String
  outgoingServer String
  outgoingServerPort Int
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isActive       Boolean      @default(true)
  mail360AccountKey String?
  smtpConnection Int?
  isGmail        Boolean      @default(false)
  incomingServer String
  incomingServerPort Int
  incomingUser   String
  incomingPassword String
  sslEnabled     Boolean      @default(true)
  startTls       Boolean      @default(false)
  saveSentCopy   Boolean      @default(true)
  syncFromDate   DateTime?    @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  messages       EmailMessage[]

  @@index([organizationId])
}

enum MessageType {
  REAL_REPLY
  BOUNCE
  AUTO_REPLY
  OUT_OF_OFFICE
  OTHER
}

model EmailMessage {
  id              String       @id @default(cuid())
  messageId       String       @unique // From Mail360
  threadId        String       // For conversation grouping
  organizationId  String
  emailAccountId  String       // The receiving account
  subject         String
  sender          String
  recipientEmail  String
  content         String       @db.Text
  receivedAt      DateTime
  messageType     MessageType
  isRead          Boolean      @default(false)
  classificationScores Json?   // Store raw classification scores
  organization    Organization @relation(fields: [organizationId], references: [id])
  emailAccount    EmailAccount @relation(fields: [emailAccountId], references: [id])
  
  @@index([organizationId])
  @@index([emailAccountId])
  @@index([threadId])
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id              String           @id @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ghlIntegrations GHLIntegration[]
  metrics         Metric[]
  scenarios       Scenario[]
  users           User[]
  webhookLogs     WebhookLog[]
  researchResults ResearchResult[]
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           String        @default("user")
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Metric {
  id             String       @id @default(cuid())
  accountId      String
  organizationId String
  scenarioName   String
  enrollments    Int          @default(0)
  replies        Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([accountId, scenarioName])
  @@index([scenarioName])
}

model Signature {
  id        String     @id @default(cuid())
  name      String     @unique
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  scenarios Scenario[]
}

model Scenario {
  id                  String       @id @default(cuid())
  name                String
  description         String?
  type                String       @default("simple")
  status              String       @default("active")
  signatureId         String?
  customizationPrompt String?
  emailExamplesPrompt String?
  organizationId      String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  attachments         Attachment[]
  organization        Organization @relation(fields: [organizationId], references: [id])
  signature           Signature?   @relation(fields: [signatureId], references: [id])

  @@unique([name, organizationId])
  @@index([name])
}

model Prompt {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldMapping {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  mapping     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attachment {
  id         String   @id @default(cuid())
  name       String
  type       String
  url        String
  scenarioId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  scenario   Scenario @relation(fields: [scenarioId], references: [id])

  @@index([scenarioId])
}

model WebhookField {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  required    Boolean  @default(false)
  type        String   @default("string")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookLog {
  id               String         @id @default(cuid())
  accountId        String
  organizationId   String
  createdAt        DateTime       @default(now())
  status           String         @default("error")
  scenarioName     String         @default("Unknown")
  contactEmail     String         @default("Unknown")
  contactName      String         @default("Unknown")
  company          String         @default("Unknown")
  requestBody      Json
  responseBody     Json           @default("{}")
  ghlIntegrationId String
  GHLIntegration   GHLIntegration @relation(fields: [ghlIntegrationId], references: [id])
  organization     Organization   @relation(fields: [organizationId], references: [id])

  @@index([accountId])
  @@index([createdAt])
  @@index([ghlIntegrationId])
  @@index([scenarioName])
}

model PlayingWithNeon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model GHLIntegration {
  id             String       @id @default(cuid())
  locationId     String
  locationName   String?
  accessToken    String
  refreshToken   String
  expiresAt      DateTime
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  WebhookLog     WebhookLog[]

  @@unique([organizationId, locationId])
  @@index([locationId])
}

model ResearchResult {
  id            String      @id
  query         String
  result        String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([organizationId])
}

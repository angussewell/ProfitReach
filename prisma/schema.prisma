// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model metric {
  id           String   @id @default(cuid())
  accountId    String
  scenarioName String
  enrollments  Int      @default(0)
  replies      Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([accountId, scenarioName])
  @@index([scenarioName])
}

model signature {
  id          String    @id @default(cuid())
  name        String    @unique
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scenarios   scenario[]
}

model scenario {
  id                   String    @id @default(cuid())
  name                 String    @unique
  description          String?
  type                 String    @default("simple")
  status              String    @default("active")
  signatureId         String?
  signature           signature? @relation(fields: [signatureId], references: [id])
  customizationPrompt String?
  emailExamplesPrompt String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  attachments         attachment[]

  @@index([name])
}

model prompt {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model fieldMapping {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  mapping     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model attachment {
  id         String   @id @default(cuid())
  name       String
  type       String
  url        String
  scenarioId String
  scenario   scenario @relation(fields: [scenarioId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([scenarioId])
}

model webhookField {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  required    Boolean  @default(false)
  type        String   @default("string")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model webhookLog {
  id           String   @id @default(cuid())
  accountId    String
  createdAt    DateTime @default(now())
  status       String   @default("error")
  scenarioName String   @default("Unknown")
  contactEmail String   @default("Unknown")
  contactName  String   @default("Unknown")
  company      String   @default("Unknown")
  requestBody  Json
  responseBody Json     @default("{}")

  @@index([scenarioName])
  @@index([createdAt])
  @@index([accountId])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}
